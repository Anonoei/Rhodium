## Extrusion
[gcode_macro _SET_EXTRUDE]
description: Set printer extrusion factor
gcode:
    {% set PERCENT = params.PERCENT|default(100)|int %}
    M221 S{PERCENT}

[gcode_macro _EXTRUDE_ABSOLUTE]
description: Absolute extrusion
gcode:
    M82

[gcode_macro _EXTRUDE_RELATIVE]
description: Relative extrusion
gcode:
    M83

[gcode_macro _EXTRUDER_ZERO]
description: Zero the extruder
gcode:
    G92 E0

[gcode_macro G10]
description: Retract
rename_existing: G10.1
gcode:
    _CLIENT_RETRACT {rawparams}

[gcode_macro G11]
description: Unretract
rename_existing: G11.1
gcode:
    _CLIENT_EXTRUDE {rawparams}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
    {% set CFG              = printer['gcode_macro _CONFIG'] %}
    {% set use_fw_retract   = (CFG.retract_enabled|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
    {% set length           = params.LENGTH|default(CFG.unretract_length)|float %}
    {% set speed            = params.SPEED|default(CFG.unretract_speed)|default(35) %}
    {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

    {% if printer.toolhead.extruder != '' %}
        {% if not printer[printer.toolhead.extruder].can_extrude %}
            _RAISE_ERROR NAME=retract._CLIENT_EXTRUDE MSG="Extruder is not hot enough to extrude!"
        {% else %}
            _EXTRUDE_RELATIVE
            #_LOG NAME=convenience.retract.CLIENT_EXTRUDE LVL=TRACE MSG="Extruding {length} at {speed}"
            G0 E{length} F{(speed|float|abs) * 60}
            {% if absolute_extrude %}
                _EXTRUDE_ABSOLUTE
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set CFG = printer['gcode_macro _CONFIG'] %}
  {% set length = params.LENGTH|default(CFG.unretract_length)|float %}
  {% set speed = params.SPEED|default(CFG.unretract_speed)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

## Movement
[gcode_macro _POSITION_ABSOLUTE]
description: Absolute positioning
gcode:
    G90

[gcode_macro _POSITION_RELATIVE]
description: Relative positioning
gcode:
    G91

[gcode_macro STEPPERS_OFF]
description: Turn steppers off
gcode:
    M84

[gcode_macro _SET_SPEED]
description: Set printer speed factor
gcode:
    {% set PERCENT = params.PERCENT|default(100)|int %}
    M220 S{PERCENT}

[gcode_macro G32]
description: Home axes, level, then home again
gcode:
    FORCE_CLEAR NAME=aliases.movement.G32

    _MACRO_ENTRY NAME=STATE_G32

    _LOG NAME=aliases.movement.G32 MSG="Performing G32..." DISPLAY=1
    G28
    LEVEL
    G28
    
    PARK POS="CENTER"
    _MACRO_EXIT NAME=STATE_G32

## Other
[delayed_gcode CLEAR_DISPLAY]
gcode:
  M117

[gcode_macro _CLEAR_BUFFER]
description: Wait for g-codes to finish before proceeding
gcode:
    M400

[gcode_macro _PAUSE]
description: Pause in milliseconds
gcode:
    {% set TIME = params.T|default(100)|int %}
    G4 P{TIME}

## Heaters
[gcode_macro TURN_OFF_HEATERS]
description: Turns off heaters
rename_existing: _TURN_OFF_HEATERS
gcode:
    _TURN_OFF_HEATERS
    _SET_STATUS STATUS=active

[gcode_macro SET_HEATER_TEMPERATURE]
description: Set heater temperature override
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER %}
    {% set TARGET = params.TARGET|default(0)|int %}
    SET_HEATER HEATER={HEATER} TEMP={TARGET}

[gcode_macro SET_HEATER]
description: Set heater temperature
gcode:
    {% set HEATER = params.HEATER %}
    {% set WAIT = params.WAIT|default(0)|int %}
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set VARIANCE = params.VARIANCE|default(1)|int %}

    {% if TEMP == 0 %}
        {% set WAIT = 0 %}
    {% endif %}

    _SET_STATUS STATUS=heating

    _LOG NAME="aliases.heater.SET_HEATER" LVL=TRACE MSG="Running SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TEMP}"
    _SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TEMP}
    {% if WAIT == 1 %}
        _LOG NAME="aliases.heater.SET_HEATER" LVL=TRACE MSG="Running TEMPERATURE_WAIT SENSOR={HEATER} MINIMUM={TEMP-VARIANCE} MAXIMUM={TEMP+VARIANCE}"
        TEMPERATURE_WAIT SENSOR={HEATER} MINIMUM={TEMP-VARIANCE} MAXIMUM={TEMP+VARIANCE}
        _SET_STATUS STATUS=active
    {% endif %}
    
[gcode_macro _SET_HOTEND]
description: Set hotend temperature
gcode:
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set TOOL = params.TOOL|default(-1)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    {% if TOOL == -1 or TOOL == 0 %}
        SET_HEATER HEATER=extruder TEMP={TEMP} WAIT={WAIT}
    {% else %}
        SET_HEATER HEATER="extruder{TOOL}" TEMP={TEMP} WAIT={WAIT}
    {% endif %}

[gcode_macro M104]
description: Set hotend temperature
rename_existing: M99104
gcode:
    {% set TEMP = params.S|float %}
    {% set TOOL = params.T|default(-1)|int %}
    _SET_HOTEND TEMP={TEMP} TOOL={TOOL} WAIT=0

[gcode_macro M109]
description: Wait for hotend temperature
rename_existing: M99109
gcode:
    {% set TEMP = params.S|float %}
    {% set TOOL = params.T|default(-1)|int %}
    _SET_HOTEND TEMP={TEMP} TOOL={TOOL} WAIT=1

[gcode_macro _SET_BED]
description: Set hotend temperature
gcode:
    {% set TEMP = params.TEMP|default(0)|int %}
    {% set WAIT = params.WAIT|default(0)|int %}

    SET_HEATER HEATER=heater_bed TEMP={TEMP} WAIT={WAIT}

[gcode_macro M140]
description: Set bed temperature
rename_existing: M99140
gcode:
    {% set TEMP = params.S|float %}
    _SET_BED TEMP={TEMP} WAIT=0

[gcode_macro M190]
description: Wait for bed temperature
rename_existing: M99190
gcode:
    {% set TEMP = params.S|int %}
    _SET_BED TEMP={TEMP} WAIT=1

## Shutdown
[gcode_macro FIRMWARE_RESTART]
description: Restart printer
rename_existing: BASE_FIRMWARE_RESTART
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        {% if printer["gcode_macro _CONFIG"].print_bed_clear %}
            PARK
        {% endif %}
    {% endif %}
    BASE_FIRMWARE_RESTART

[gcode_macro SAVE_CONFIG]
description: Save configuration changes
rename_existing: BASE_SAVE_CONFIG
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
        {% if printer["gcode_macro _CONFIG"].print_bed_clear %}
            PARK
        {% endif %}
    {% endif %}
    BASE_SAVE_CONFIG